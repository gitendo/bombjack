[{"body":"\rto my personal Bomb Jack documentation project based on software disassembly, reverse engineering and other available sources.\nYou\u0026rsquo;ve probably dissected Bomb Jack along with Andre Weissflog. If not I really recommend reading it. Instead of emulating the game I\u0026rsquo;ve been digging into the software side to figure out inner workings and hidden secrets of this instant classic.\nMy final goal is to provide working assembly source, ready for possible improvements. This is ongoing exploration project and might not be completed.\nCurrent progress:\ndisassembly (not public yet) reverse engineering (WIP) documentation (WIP) Explore\n","link":"https://gitendo.github.io/bombjack/","section":"","title":"Welcome"},{"body":"The following table shows a short overview of Bomb Jack memory map as seen and used by Z80.\nAddress Size Type Access Description $0000 $1FFF ROM RO 09_j01b.bin $2000 $3FFF ROM RO 10_101b.bin $4000 $5FFF ROM RO 11_m01b.bin $6000 $7FFF ROM RO 12_n01b.bin $8000 $0FFF RAM RW general purpose RAM $9000 $03FF VRAM RW character map $9400 $03FF VRAM RW attribute map $9820 $005F VRAM WO object attribute memory $9A00 - I/O WO 32*32 objects counter ??? $9C00 $00FF CRAM WO palette data $9E00 - I/O WO background picture select $B000 - I/O RW joystick 1 and NMI mask $B001 - I/O RO joystick 2 $B002 - I/O RO coins and start button $B003 - I/O RW watchdog reset $B004 - I/O RW dip switch 1 and screen flip $B005 - I/O RO dip switch 2 $B006 - I/O RW sound latch $C000 $1FFF ROM RO 13.1r ","link":"https://gitendo.github.io/bombjack/memory_map/","section":"","title":"Memory Map"},{"body":"Character map combined with attribute map creates BG_1 - second of the three layers of graphics.\n$9000 - $93FF (Read/Write)\nðŸ’¡ Columns are being stored in RAM from right to left. First visible column starts at $93A0 and ends at $93BF. Last visible column starts at $9040 and ends at $905F respectively. These are also addresses for top left, bottom left, top right and bottom right characters visible on the layer.\nBG_1 is used for text, bottom part of title screen logo, HUD, stage borders, platforms and bombs. It has priority above BG_0 but below OBJ. Main features are:\narray of 32 columns, 32 rows each each entry is 1 byte and represents 1 character code (8x8 pixel block also called tile) from bank 0 up to 512 unique characters is possible thanks to corresponding attribute map entry first and last two columns remain off screen (screen resolution is 224*256) ","link":"https://gitendo.github.io/bombjack/character_map/","section":"","title":"Character Map"},{"body":"Attribute map is strictly related to character map, both are used to create BG_1 layer.\n$9400 - $97FF (Read/Write)\nðŸ’¡ Columns are being stored in RAM from right to left. First visible column starts at $97A0 and ends at $97BF. Last visible column starts at $9440 and ends at $945F respectively. These are also addresses for top left, bottom left, top right and bottom right attributes of characters visible on the layer.\nMain purpose of attribute map is to provide additional features to character map. While character map entry defines character (tile) code to be put on the BG_1 layer, related attribute map entry does the following:\nbits 0 to 3 define palette (0-15) to be used with such character bit 4 selects character slot to choose from: (0) lower (characters from 0 to 255) or (1) upper (characters from 256 to 511) bits from 5 to 7 seem to be unused Other than that it has features identical to character map:\narray of 32 columns, 32 rows each each entry is 1 byte and corresponds to related character map entry first and last two columns remain off screen (screen resolution is 224*256) ","link":"https://gitendo.github.io/bombjack/attribute_map/","section":"","title":"Attribute Map"},{"body":"Object attribute memory holds the objects to be displayed (also reffered as sprites) and their attributes. It creates OBJ - last of the three layers of graphics.\n$9820 - $987F (Write Only)\nðŸ’¡ OAM mirror is stored in RAM at $8500 where it\u0026rsquo;s being freely manipulated. OAM update is done during VBLANK - this prevents glitches and is commonly used method. During update objects are sorted, 32*32 ones are stored from the beginning of OAM and 16*16 from the end. Finally $9A00 register is updated with value equal to sum of 32*32 objects + 3 (refer to routine at $0958).\nThe hardware allows 24 independent objects 16*16 or 32*32 pixels each with dedicated palette (0-15). OAM effectively creates 3rd layer of graphic which has the highest priority - OBJ is displayed over BG_1 which is displayed over BG_0. Each each of 24 entries in the map takes 4 bytes with the following meaning:\nBits Description 0 - 6 object id (0-127 in case of 16*16 and 0-31 for 32*32 objects) 7 toggles between 16*16 (0) and 32*32 (1) objects 0 - 3 object palette id (0-15) 4 seems unused 5 not used by hardware, game uses it to sort objects by size which hardly makes any sense 6 flips object vertically 7 flips object horizontally 0 - 7 object x coordinate 0 - 7 object y coordinate ","link":"https://gitendo.github.io/bombjack/object_memory/","section":"","title":"Object Attribute Memory"},{"body":"Bomb Jack PCB has two dip switches to configure game settings. How the game accesses and makes use of them is explained right here.\nDS_1 $B004 (Read/Write)\nDS_1 value can be read from $B004. It\u0026rsquo;s being mirrored in RAM at $8013 and used accordingly. Factory DS_1 settings are: %11000000 which translates to demo sound on and upright mode.\nðŸ’¡ While $B004 seems like read only it actually is writable. Function at $4587 checks for two player game and when the mode is set to cocktail it writes 1 to flip the screen for player two and 0 back for player one.\nDemo sound\rOff %00000000 On %10000000 Mode\rCocktail %00000000 Upright %01000000 Lives\r3 %00000000 4 %00010000 5 %00100000 2 %00110000 Coin 2\r1 Coin - 1 Credit %00000000 2 Coins - 1 Credit %00000100 1 Coin - 2 Credits %00001000 1 Coin - 3 Credits %00001100 Coin 1\r1 Coin - 1 Credit %00000000 1 Coin - 2 Credits %00000001 1 Coin - 3 Credits %00000010 1 Coin - 6 Credits %00000011 DS_2 $B005 (Read Only)\nDS_2 value can be read from $B005. It\u0026rsquo;s being mirrored in RAM at $8014 and used accordingly. Factory defaults for DS_2 are: %01010000 which translates to high special coin ratio, hard difficulty and bird moving fast.\nðŸ’¡ On the contrary to DS_1 it is read only however it holds its own secret. According to manual, first three bits / switches are unused and should be turned off. But if you enable function at $5A07 by replacing $C9 (ret) with $F5 (push af) you\u0026rsquo;ll get access to unused \u0026ldquo;Extra lives\u0026rdquo; setting.\nSpecial coin appearance ratio\rHigh %00000000 Low %10000000 Enemy numbers and speed\rEasy %00100000 Medium %00000000 Hard %01000000 Hardest %01100000 Extra lives\rNone %00000000 100K Only %00000100 100K and 300K %00000110 50K Only %00000011 50K and 100K %00000101 50K, 100K and 300K %00000111 Every 100K %00000001 Every 30K %00000010 Bird speed\rSlow %00000000 Normal %00001000 Fast %00010000 Fastest %00011000 ","link":"https://gitendo.github.io/bombjack/dip_switch/","section":"","title":"Dip Switch Settings"},{"body":"Here are external sources I\u0026rsquo;ve found useful and I\u0026rsquo;ve used in this project:\nBomb Jack at Strategy Wiki\nInstruction manual\nBomb Jack driver by Mirko Buffoni\n","link":"https://gitendo.github.io/bombjack/sources/","section":"","title":"Sources"},{"body":"","link":"https://gitendo.github.io/bombjack/categories/","section":"categories","title":"Categories"},{"body":"","link":"https://gitendo.github.io/bombjack/tags/","section":"tags","title":"Tags"}]